
Author: Leonel F. de Alencar, leonel.de.alencar@ufc.br, Federal University of CearÃ¡
Date: April 16, 2018, updated February 18, 2020

This folder contains source code and example data for compiling and
testing unweighted finite-state
transducers (FSTs) modeling Portuguese derivational morphology with
the free software/open source finite-state packages FOMA (Hulden 2009)
and its proprietary counterpart XFST (Beesley & Karttunen 2003),
freely available for non-commercial purposes. The main components of
the source code are finite-state grammars, but additional bash and
Python scripts are used for the purposes specified in
the respective incode documentation.

The focus is the formation of diminutives, augmentatives, and
superlatives (so called evaluative suffixes, according to Villalva &
Silvestre 2014, among others). Productive word-formation processes are implemented
within the paradigm of finite-sate morphology (Beesley & Karttunen 2003), as described in the paper: 


ALENCAR, Leonel Figueiredo de;  CUCONATO , Bruno; RADEMAKER, Alexandre. MorphoBr: an open source large-coverage full-form lexicon for morphological analysis of Portuguese. Texto Livre: Linguagem e Tecnologia, Belo Horizonte, v. 11, n. 3, p. 1-25, set.- dez. 2018. 
ISSN 1983-3652 
DOI: 10.17851/1983-3652.11.3.1-25
http://www.periodicos.letras.ufmg.br/index.php/textolivre/article/view/14294. 

For further details of the implemantation, see the incode
documentation of the respective source files. 
This implementation of derivational morphology is work in
progress. Beginning with the diminutives, we will progressively
include other suffixes. It is assumed some familiarity with the
paradigm of finite-state morphology to understand the source files and
their documentation, so as to eventually customize them to exclude or
include some derivations to suit a particular dialect of
Portuguese. However, just a basic familiarity with the unix command
line is needed to compile the final FST and use it for morphological
analysis or generation.  For a birds-eye view on Foma basics, see, for
example, the first part of the following tutorial, which deals with
unweighted finite-state transducers:

http://clt.gu.se/sites/clt.gu.se/files/mkp/clttutorial.pdf

Foma is concisely described in this paper:

http://dingo.sbs.arizona.edu/~mhulden/hulden_foma_2009.pdf

Since Foma is practically a clone of XFST, they share the same
formalism (with minor exceptions) and virtually all interface
commands. For an in-depth understanding of finite-state morphology and
XFST, see:

- Beesley, K. R., Karttunen, L.: Finite State Morphology. CSLI,
  Stanford (2003).

To compile the transducer for analyzing or generating diminutives in
Portuguese, download all files in the present folder to a local folder and run this script:

#+BEGIN_EXAMPLE
build.sh
#+END_EXAMPLE

This scripts assumes that MorphoBr's input files reside in the following directories:

~/MorphoBr/nouns/*.dict ~/MorphoBr/adjectives/*.dict

If this is not the case, edit the corresponding paths in the script.

To load the compiled FST binary in Foma and test it interactively, run
the following commands:


#+BEGIN_EXAMPLE
foma -e "load foma.fst" 
#+END_EXAMPLE

and then in the Foma shell:

#+BEGIN_EXAMPLE
foma[1]: up manguinhas
manga+N+DIM+F+PL
foma[1]: down elefante+N+DIM+M+SG
elefantezinho
elefantinho
foma[1]: 
#+END_EXAMPLE

To write the Foma FST in the att and Prolog raw text formats, execute
the command:

#+BEGIN_EXAMPLE
foma -e "load foma.fst" -e "write att > foma.att" -e "write prolog > foma.pl" -s
#+END_EXAMPLE

Both formats are very useful to store and distribute transucer files
because they are, differently than the binary format, operating system
independent. Besides, the prolog format can be read by XFST:

#+BEGIN_EXAMPLE
xfst -e "read prolog foma.pl" -e "up piresinhos" -stop
Opening input file 'foma.pl'
April 18, 2018 21:53:39 GMT
Reading UTF-8 text from 'foma.pl' 
Closing 'foma.pl'
pires+N+DIM+M+PL
#+END_EXAMPLE

The corresponding commands in XFST are the same, only the binary file
name is different:

#+BEGIN_EXAMPLE
xfst -e "load xfst.fst"
#+END_EXAMPLE

To generate all paths (i.e. word-parse pairs) from the Foma FST's
binary, run the bash script

#+BEGIN_EXAMPLE
BuildPairsFromFomaFST.sh foma.fst 
#+END_EXAMPLE

The output is saved in the file foma.fst.pairs. These word-parse pairs
can also be retrieved from the dict/diminutives directory.

In the following, some useful commands for using FSTs in morphological
analysis and generation. In the test subfolder, two examples files are
provided. The file adj-n-inho.lower contains all -inho and -zinho
diminutives from DELAF-PB and GFL, while test-upper-big.txt contains
morphological parses with different kinds of lemmas (see Alencar,
Cuconateo & Rademaker, 2018). The former is useful for testing generation.

Generating from input file with Foma's FST:

#+BEGIN_EXAMPLE
foma -r -e "load foma.fst" -e "down < test/test-upper-big.txt > test-upper.foma.out" -s
#+END_EXAMPLE

Parsing input file with Foma's FST:

#+BEGIN_EXAMPLE
foma -r -e "load foma.fst" -e "down < test/test-upper-big.txt > test-upper.foma.out" -s
#+END_EXAMPLE

or 

#+BEGIN_EXAMPLE
cat test/adj-n-inho.lower | flookup foma.fst > inho.foma.out 
#+END_EXAMPLE

Parsing input file with XFST's FST:
#+BEGIN_EXAMPLE
cat test/adj-n-inho.lower | lookup -flags TT xfst.fst > inho.xfst.out
#+END_EXAMPLE

or

#+BEGIN_EXAMPLE
xfst -s xfst.fst -e "down < test/test-upper-n-adj.txt > test-upper.xfst.out" -stop
#+END_EXAMPLE
